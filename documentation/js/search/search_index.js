var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/DebugBuildInterface.html",[0,0.244,1,1.407]],["body/interfaces/DebugBuildInterface.html",[0,0.419,1,2.528,2,0.937,3,0.937,4,0.937,5,0.651,6,2.591,7,2.591,8,0.937,9,0.651,10,1.161,11,3.818,12,3.818,13,3.21,14,1.107,15,0.063,16,3.488,17,1.525,18,1.61,19,0.937,20,2.591,21,1.61,22,2.136,23,1.797,24,1.3,25,0.04,26,0.05,27,0.04]],["title/interfaces/LookupConditionPayloadInterface.html",[0,0.244,28,1.673]],["body/interfaces/LookupConditionPayloadInterface.html",[0,0.405,2,0.869,3,0.869,4,0.869,5,0.604,8,0.869,9,0.604,10,1.107,14,1.112,15,0.064,17,1.415,18,1.69,19,0.869,21,1.952,24,1.879,25,0.037,26,0.048,27,0.037,28,2.926,29,1.982,30,2.404,31,1.982,32,2.598,33,2.205,34,4.745,35,2.337,36,3.045]],["title/interfaces/LookupEqualityPayloadInterface.html",[0,0.244,37,1.673]],["body/interfaces/LookupEqualityPayloadInterface.html",[0,0.387,2,0.94,3,0.94,4,0.94,5,0.653,8,0.94,9,0.653,10,1.163,14,1.108,15,0.064,19,0.94,21,2.011,25,0.04,26,0.05,27,0.04,29,2.142,31,2.142,37,2.879,38,2.599,39,4.839,40,4.839]],["title/classes/PipelineBuilder.html",[41,1.195,42,1.407]],["body/classes/PipelineBuilder.html",[1,1.074,2,0.247,3,0.665,4,0.247,5,0.172,8,0.247,9,0.296,10,0.426,11,1.549,12,1.549,14,0.935,15,0.065,16,1.177,17,1.083,18,1.285,19,0.247,20,1.177,21,1.395,22,1.71,23,2.243,24,0.923,25,0.011,26,0.018,27,0.011,32,1.276,33,0.693,41,0.403,42,1.276,43,0.564,44,0.684,45,4.286,46,4.618,47,2.627,48,4.743,49,1.962,50,2.627,51,2.627,52,2.627,53,2.627,54,2.331,55,2.627,56,2.074,57,3.733,58,3.393,59,1.962,60,2.87,61,2.627,62,2.87,63,1.49,64,2.331,65,2.074,66,2.331,67,1.84,68,0.866,69,3.245,70,3.316,71,1.49,72,2.426,73,2.562,74,2.948,75,0.866,76,2.87,77,2.87,78,0.866,79,1.49,80,1.962,81,2.87,82,0.866,83,0.866,84,0.866,85,0.866,86,0.866,87,1.84,88,1.49,89,1.49,90,1.49,91,0.866,92,0.866,93,0.866,94,0.866,95,0.866,96,1.49,97,1.571,98,0.866,99,0.866,100,2.331,101,1.49,102,0.866,103,1.49,104,1.962,105,1.962,106,0.866,107,1.962,108,2.074,109,2.627,110,0.866,111,1.962,112,1.49,113,2.87,114,0.866,115,2.562,116,0.474,117,0.866,118,0.684,119,0.474,120,0.866,121,1.49,122,0.684,123,0.866,124,0.866,125,3.018,126,2.627,127,2.331,128,1.49,129,1.49,130,3.521,131,0.866,132,3.733,133,1.962,134,1.49,135,0.866,136,0.866,137,0.866,138,1.177,139,1.49,140,1.49,141,0.866,142,0.866,143,1.962,144,0.866,145,1.49,146,0.866,147,0.866,148,1.49,149,0.866,150,0.866,151,0.97,152,1.177,153,1.177,154,1.177,155,0.97,156,1.177,157,1.177,158,1.177,159,1.177,160,1.177,161,0.97,162,1.177,163,0.816,164,0.97,165,0.97,166,0.97,167,1.177,168,1.177,169,1.177,170,1.177,171,1.177,172,1.177,173,1.177,174,0.97,175,0.97,176,1.177,177,1.177,178,0.97,179,1.177,180,1.962,181,0.866,182,0.866,183,1.49,184,1.962,185,1.277,186,0.866,187,0.684,188,2.627,189,0.866,190,0.866,191,0.866,192,0.866,193,0.866,194,0.866,195,0.866,196,0.866,197,0.866,198,0.866,199,0.866,200,0.866,201,1.49,202,0.866,203,0.866,204,0.866,205,0.866,206,0.866,207,1.962,208,0.866,209,0.866,210,0.866,211,0.866,212,0.866,213,0.866,214,0.866,215,1.84,216,0.866,217,0.866,218,0.866,219,0.866,220,0.97,221,1.49,222,1.49,223,0.866,224,0.866,225,0.866,226,1.49,227,0.866,228,0.866,229,0.866,230,0.866]],["title/classes/PipelineError.html",[41,1.195,119,1.407]],["body/classes/PipelineError.html",[3,0.916,4,0.916,5,0.637,8,0.916,9,0.637,10,1.144,14,0.961,15,0.063,19,0.916,21,1.814,23,1.756,24,1.27,25,0.039,26,0.049,27,0.039,32,1.756,41,1.491,43,2.088,67,3.452,70,3.165,72,2.533,73,3.796,74,2.533,108,3.452,119,2.581,125,2.533,220,2.846,231,2.533,232,4.008,233,4.008,234,4.008,235,3.208,236,3.208,237,3.208,238,3.208]],["title/interfaces/ProjectStageInterface.html",[0,0.244,35,1.407]],["body/interfaces/ProjectStageInterface.html",[0,0.399,2,0.988,3,0.988,4,0.988,5,0.687,8,0.988,9,0.687,10,1.199,14,1.199,15,0.063,19,0.988,25,0.043,26,0.052,27,0.043,35,2.476,87,3.867,239,2.733,240,2.733,241,4.522]],["title/interfaces/StageErrorInterface.html",[0,0.244,97,1.407]],["body/interfaces/StageErrorInterface.html",[0,0.399,2,0.988,3,0.988,4,0.988,5,0.687,8,0.988,9,0.687,10,1.199,14,1.007,15,0.063,19,0.988,21,1.939,25,0.043,26,0.052,27,0.043,97,2.476,215,3.867,220,3.188,242,2.253,243,2.733]],["title/interfaces/StageInterface.html",[0,0.244,18,1.018]],["body/interfaces/StageInterface.html",[0,0.344,2,0.784,3,0.784,4,0.784,5,0.545,8,0.784,9,0.545,10,1.035,14,1.158,15,0.064,18,1.608,19,0.784,25,0.034,26,0.045,27,0.034,32,2.778,33,2.145,151,3.004,155,3.004,161,3.004,163,2.526,164,3.004,174,3.004,175,3.004,178,3.004,244,2.167]],["title/changelog.html",[245,1.409,246,1.409,247,1.709]],["body/changelog.html",[5,0.479,15,0.041,17,1.122,25,0.03,26,0.041,27,0.03,33,1.122,116,1.82,247,1.906,248,2.414,249,2.414,250,2.414,251,2.414,252,2.414,253,2.414,254,2.414,255,2.414,256,5.152,257,2.414,258,4.068,259,5.152,260,5.111,261,2.414,262,2.414,263,2.414,264,2.414,265,2.414,266,2.414,267,2.414,268,2.414,269,2.414,270,2.414,271,2.414,272,2.414,273,2.414,274,2.414,275,2.414,276,2.414,277,2.414,278,4.552,279,3.325,280,2.414,281,2.414,282,2.414,283,2.414,284,2.414,285,3.325,286,3.325,287,2.414,288,2.414,289,2.414,290,2.414,291,2.414,292,2.414,293,2.414,294,2.414,295,2.414,296,2.414,297,2.414,298,2.414,299,2.414]],["title/coverage.html",[300,2.74]],["body/coverage.html",[0,0.287,1,0.521,5,0.189,6,0.752,7,0.752,13,0.752,14,0.387,15,0.064,18,0.377,25,0.012,26,0.02,27,0.012,28,0.62,29,1.052,30,0.752,31,1.052,35,0.521,37,0.62,38,0.752,41,0.751,42,0.521,44,1.276,65,0.752,97,0.521,116,0.521,119,0.521,122,0.752,163,0.521,185,0.62,187,0.752,231,0.752,239,0.752,240,0.752,242,1.052,243,0.752,244,0.752,300,0.752,301,0.752,302,0.952,303,0.952,304,0.952,305,5.173,306,4.997,307,4.954,308,2.481,309,2.105,310,0.952,311,0.952,312,0.952,313,0.952,314,0.752,315,0.952,316,0.952,317,3.995,318,5.06,319,3.388,320,0.952,321,0.952,322,0.952,323,0.952,324,0.952,325,0.952,326,0.952,327,0.952,328,4.146,329,0.952,330,0.952,331,0.952,332,0.952,333,0.952,334,0.952,335,0.952,336,0.952,337,0.952,338,0.952,339,0.952,340,0.952,341,0.952,342,0.952,343,4.202,344,0.952,345,0.952,346,0.952,347,0.952,348,0.952,349,0.952,350,0.952,351,0.952,352,0.952,353,0.952,354,0.952,355,0.952,356,0.952,357,0.952,358,0.952,359,0.952,360,2.105,361,3.22,362,0.952,363,0.752,364,0.952,365,0.952,366,0.952,367,0.952,368,0.952,369,2.105,370,0.952,371,0.952,372,0.952,373,1.616,374,1.616,375,0.952,376,0.952,377,1.616,378,1.616,379,0.952,380,0.952,381,4.252,382,0.952,383,0.952,384,0.952,385,0.952,386,0.952,387,0.952,388,0.952,389,0.952,390,0.952,391,0.952,392,0.952,393,0.952,394,0.952,395,0.952,396,0.952,397,0.952,398,0.952,399,0.952,400,3.388,401,0.752,402,0.952,403,0.952,404,0.952,405,0.952,406,0.952,407,3.22,408,0.952,409,0.952,410,0.952,411,0.952,412,0.952,413,0.952,414,0.952,415,4.38,416,0.952,417,0.952,418,0.952,419,0.952,420,0.952,421,0.952,422,0.952,423,0.952,424,0.952,425,0.952,426,0.952,427,0.952,428,0.952,429,0.952,430,0.952,431,0.952,432,0.952,433,0.952,434,0.952,435,0.952,436,0.952,437,4.085,438,0.952,439,0.952,440,0.952,441,0.952,442,0.952,443,0.952,444,0.952,445,0.952,446,0.952,447,0.952,448,0.952,449,0.952,450,0.952,451,0.952,452,0.952,453,3.532,454,0.952,455,0.952,456,0.952,457,0.952,458,0.952,459,0.952,460,0.952,461,0.952,462,0.952,463,0.952]],["title/dependencies.html",[464,1.709,465,2.432]],["body/dependencies.html",[15,0.06,25,0.048,26,0.055,27,0.048,116,2.134,118,3.078,465,3.078,466,3.898,467,3.898,468,3.898,469,3.898]],["title/miscellaneous/enumerations.html",[470,1.709,471,2.432]],["body/miscellaneous/enumerations.html",[9,0.528,15,0.064,23,2.829,24,1.407,25,0.033,26,0.044,27,0.033,33,1.651,151,2.313,152,2.805,153,2.805,154,2.805,155,2.313,156,2.805,157,2.805,158,2.805,159,2.805,160,2.805,161,2.313,162,2.805,163,1.945,164,2.313,165,2.313,166,2.313,167,2.805,168,2.805,169,2.805,170,2.805,171,2.805,172,2.805,173,2.805,174,2.313,175,2.313,176,2.805,177,2.805,178,2.313,179,2.805,242,1.733,314,2.805,470,2.102,471,2.102,472,3.553,473,2.662,474,2.662,475,3.999,476,2.662,477,2.805,478,2.662,479,2.662,480,2.662,481,2.662,482,2.662,483,2.662,484,2.662]],["title/index.html",[9,0.43,245,1.409,246,1.409]],["body/index.html",[15,0.062,17,2.022,24,1.927,25,0.039,26,0.049,27,0.039,42,1.737,56,2.505,115,2.505,138,3.143,185,2.591,317,2.505,363,2.505,401,2.505,464,2.505,477,2.505,485,4.795,486,4.35,487,3.172,488,3.172,489,3.172,490,3.98,491,3.172,492,3.98,493,3.172,494,3.172,495,3.172,496,3.172,497,3.172,498,3.172,499,3.172,500,3.172,501,3.172,502,3.98,503,3.172,504,3.172,505,3.172,506,3.172,507,3.172,508,3.172,509,3.172,510,3.172,511,3.172,512,3.172,513,3.172,514,3.172,515,3.172,516,3.172,517,3.172,518,3.172,519,3.172]],["title/license.html",[245,1.409,246,1.409,520,1.709]],["body/license.html",[15,0.048,22,1.972,25,0.037,26,0.048,27,0.037,165,1.972,166,1.972,258,2.392,301,2.392,520,2.392,521,3.029,522,4.258,523,3.029,524,3.029,525,3.029,526,3.866,527,3.029,528,3.029,529,3.029,530,3.029,531,3.029,532,3.029,533,3.866,534,4.923,535,3.029,536,3.029,537,3.029,538,4.258,539,3.029,540,3.866,541,3.029,542,3.029,543,3.866,544,3.029,545,3.029,546,3.029,547,3.029,548,3.029,549,3.029,550,3.866,551,3.029,552,3.029,553,3.029,554,3.029,555,3.029,556,3.029,557,3.029,558,3.866,559,3.866,560,3.029,561,3.029,562,3.029,563,3.029,564,3.029,565,3.029,566,3.029,567,3.029,568,3.029,569,3.029,570,3.029,571,3.029,572,3.029,573,3.029,574,3.029,575,3.029,576,3.029,577,3.029,578,3.029,579,3.029,580,3.029,581,3.029,582,3.029,583,3.029,584,3.029,585,3.029,586,3.029,587,3.029,588,3.029]],["title/modules.html",[589,2.74]],["body/modules.html",[15,0.056,25,0.049,26,0.056,27,0.049,589,3.164]],["title/overview.html",[590,2.74]],["body/overview.html",[2,1.128,15,0.056,25,0.049,26,0.056,27,0.049,43,2.573,590,3.12,591,3.952,592,3.952]]],"invertedIndex":[["",{"_index":15,"title":{},"body":{"interfaces/DebugBuildInterface.html":{},"interfaces/LookupConditionPayloadInterface.html":{},"interfaces/LookupEqualityPayloadInterface.html":{},"classes/PipelineBuilder.html":{},"classes/PipelineError.html":{},"interfaces/ProjectStageInterface.html":{},"interfaces/StageErrorInterface.html":{},"interfaces/StageInterface.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{}}}],["0",{"_index":317,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["0.0.2",{"_index":256,"title":{},"body":{"changelog.html":{}}}],["0.5.33",{"_index":469,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":318,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":259,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":138,"title":{},"body":{"classes/PipelineBuilder.html":{},"index.html":{}}}],["1/1",{"_index":307,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":284,"title":{},"body":{"changelog.html":{}}}],["10/10",{"_index":315,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":306,"title":{},"body":{"coverage.html":{}}}],["11",{"_index":283,"title":{},"body":{"changelog.html":{}}}],["12",{"_index":282,"title":{},"body":{"changelog.html":{}}}],["13",{"_index":281,"title":{},"body":{"changelog.html":{}}}],["14",{"_index":280,"title":{},"body":{"changelog.html":{}}}],["15",{"_index":279,"title":{},"body":{"changelog.html":{}}}],["16",{"_index":278,"title":{},"body":{"changelog.html":{}}}],["17",{"_index":260,"title":{},"body":{"changelog.html":{}}}],["18",{"_index":277,"title":{},"body":{"changelog.html":{}}}],["19",{"_index":276,"title":{},"body":{"changelog.html":{}}}],["2",{"_index":591,"title":{},"body":{"overview.html":{}}}],["2.0.1",{"_index":468,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":275,"title":{},"body":{"changelog.html":{}}}],["20/20",{"_index":316,"title":{},"body":{"coverage.html":{}}}],["2021",{"_index":258,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["21",{"_index":274,"title":{},"body":{"changelog.html":{}}}],["22",{"_index":273,"title":{},"body":{"changelog.html":{}}}],["23",{"_index":272,"title":{},"body":{"changelog.html":{}}}],["24",{"_index":271,"title":{},"body":{"changelog.html":{}}}],["25",{"_index":270,"title":{},"body":{"changelog.html":{}}}],["26",{"_index":269,"title":{},"body":{"changelog.html":{}}}],["27",{"_index":268,"title":{},"body":{"changelog.html":{}}}],["28",{"_index":267,"title":{},"body":{"changelog.html":{}}}],["281fb81",{"_index":296,"title":{},"body":{"changelog.html":{}}}],["29",{"_index":266,"title":{},"body":{"changelog.html":{}}}],["3/3",{"_index":308,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":265,"title":{},"body":{"changelog.html":{}}}],["31",{"_index":264,"title":{},"body":{"changelog.html":{}}}],["32",{"_index":263,"title":{},"body":{"changelog.html":{}}}],["33",{"_index":262,"title":{},"body":{"changelog.html":{}}}],["34",{"_index":261,"title":{},"body":{"changelog.html":{}}}],["35",{"_index":257,"title":{},"body":{"changelog.html":{}}}],["5/5",{"_index":313,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":592,"title":{},"body":{"overview.html":{}}}],["6/6",{"_index":312,"title":{},"body":{"coverage.html":{}}}],["826ac37",{"_index":289,"title":{},"body":{"changelog.html":{}}}],["_id",{"_index":513,"title":{},"body":{"index.html":{}}}],["above",{"_index":557,"title":{},"body":{"license.html":{}}}],["absolute",{"_index":329,"title":{},"body":{"coverage.html":{}}}],["accumulator",{"_index":375,"title":{},"body":{"coverage.html":{}}}],["acos",{"_index":438,"title":{},"body":{"coverage.html":{}}}],["acosh",{"_index":439,"title":{},"body":{"coverage.html":{}}}],["action",{"_index":22,"title":{},"body":{"interfaces/DebugBuildInterface.html":{},"classes/PipelineBuilder.html":{},"license.html":{}}}],["actions",{"_index":88,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["add",{"_index":187,"title":{},"body":{"classes/PipelineBuilder.html":{},"coverage.html":{}}}],["addfields",{"_index":151,"title":{},"body":{"classes/PipelineBuilder.html":{},"interfaces/StageInterface.html":{},"miscellaneous/enumerations.html":{}}}],["addstage",{"_index":47,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["addstage('match",{"_index":509,"title":{},"body":{"index.html":{}}}],["addstage('project",{"_index":512,"title":{},"body":{"index.html":{}}}],["addtoset",{"_index":320,"title":{},"body":{"coverage.html":{}}}],["aggregate",{"_index":487,"title":{},"body":{"index.html":{}}}],["aggregation",{"_index":474,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["aggregation/index.ts",{"_index":374,"title":{},"body":{"coverage.html":{}}}],["allelementstrue",{"_index":408,"title":{},"body":{"coverage.html":{}}}],["allows",{"_index":497,"title":{},"body":{"index.html":{}}}],["alpha.0",{"_index":299,"title":{},"body":{"changelog.html":{}}}],["alpha.1",{"_index":298,"title":{},"body":{"changelog.html":{}}}],["alpha.2",{"_index":297,"title":{},"body":{"changelog.html":{}}}],["alpha.3",{"_index":293,"title":{},"body":{"changelog.html":{}}}],["alpha.4",{"_index":292,"title":{},"body":{"changelog.html":{}}}],["alpha.5",{"_index":291,"title":{},"body":{"changelog.html":{}}}],["alpha.7",{"_index":290,"title":{},"body":{"changelog.html":{}}}],["and/or",{"_index":548,"title":{},"body":{"license.html":{}}}],["anyelementtrue",{"_index":409,"title":{},"body":{"coverage.html":{}}}],["appear",{"_index":479,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["arglist",{"_index":113,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["arglist.length",{"_index":135,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["arglist[0",{"_index":139,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["arglist[0].debug",{"_index":142,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["arising",{"_index":586,"title":{},"body":{"license.html":{}}}],["array",{"_index":480,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["arrayelemat",{"_index":344,"title":{},"body":{"coverage.html":{}}}],["arraytoobject",{"_index":345,"title":{},"body":{"coverage.html":{}}}],["asin",{"_index":440,"title":{},"body":{"coverage.html":{}}}],["asinh",{"_index":441,"title":{},"body":{"coverage.html":{}}}],["associated",{"_index":535,"title":{},"body":{"license.html":{}}}],["atan",{"_index":442,"title":{},"body":{"coverage.html":{}}}],["atan2",{"_index":443,"title":{},"body":{"coverage.html":{}}}],["atanh",{"_index":444,"title":{},"body":{"coverage.html":{}}}],["authors",{"_index":576,"title":{},"body":{"license.html":{}}}],["available",{"_index":519,"title":{},"body":{"index.html":{}}}],["avg",{"_index":321,"title":{},"body":{"coverage.html":{}}}],["binarysize",{"_index":379,"title":{},"body":{"coverage.html":{}}}],["boolean",{"_index":16,"title":{},"body":{"interfaces/DebugBuildInterface.html":{},"classes/PipelineBuilder.html":{}}}],["bsonsize",{"_index":380,"title":{},"body":{"coverage.html":{}}}],["bucket",{"_index":152,"title":{},"body":{"classes/PipelineBuilder.html":{},"miscellaneous/enumerations.html":{}}}],["bucketauto",{"_index":153,"title":{},"body":{"classes/PipelineBuilder.html":{},"miscellaneous/enumerations.html":{}}}],["bug",{"_index":285,"title":{},"body":{"changelog.html":{}}}],["build",{"_index":294,"title":{},"body":{"changelog.html":{}}}],["build.interface.ts",{"_index":7,"title":{},"body":{"interfaces/DebugBuildInterface.html":{},"coverage.html":{}}}],["builder",{"_index":486,"title":{},"body":{"index.html":{}}}],["builder/dist",{"_index":504,"title":{},"body":{"index.html":{}}}],["builder/dist/operators/comparison",{"_index":506,"title":{},"body":{"index.html":{}}}],["builder/dist/operators/misc",{"_index":505,"title":{},"body":{"index.html":{}}}],["building",{"_index":238,"title":{},"body":{"classes/PipelineError.html":{}}}],["c",{"_index":523,"title":{},"body":{"license.html":{}}}],["ceil",{"_index":330,"title":{},"body":{"coverage.html":{}}}],["change",{"_index":287,"title":{},"body":{"changelog.html":{}}}],["changelog",{"_index":247,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["changes",{"_index":249,"title":{},"body":{"changelog.html":{}}}],["charge",{"_index":530,"title":{},"body":{"license.html":{}}}],["claim",{"_index":579,"title":{},"body":{"license.html":{}}}],["class",{"_index":41,"title":{"classes/PipelineBuilder.html":{},"classes/PipelineError.html":{}},"body":{"classes/PipelineBuilder.html":{},"classes/PipelineError.html":{},"coverage.html":{}}}],["classes",{"_index":43,"title":{},"body":{"classes/PipelineBuilder.html":{},"classes/PipelineError.html":{},"overview.html":{}}}],["collection",{"_index":488,"title":{},"body":{"index.html":{}}}],["collstats",{"_index":154,"title":{},"body":{"classes/PipelineBuilder.html":{},"miscellaneous/enumerations.html":{}}}],["commit",{"_index":254,"title":{},"body":{"changelog.html":{}}}],["compare",{"_index":362,"title":{},"body":{"coverage.html":{}}}],["complex",{"_index":517,"title":{},"body":{"index.html":{}}}],["concat",{"_index":416,"title":{},"body":{"coverage.html":{}}}],["concatarrays",{"_index":346,"title":{},"body":{"coverage.html":{}}}],["cond",{"_index":370,"title":{},"body":{"coverage.html":{}}}],["condition",{"_index":30,"title":{},"body":{"interfaces/LookupConditionPayloadInterface.html":{},"coverage.html":{}}}],["conditions",{"_index":556,"title":{},"body":{"license.html":{}}}],["connection",{"_index":587,"title":{},"body":{"license.html":{}}}],["console[type",{"_index":229,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["const",{"_index":115,"title":{},"body":{"classes/PipelineBuilder.html":{},"index.html":{}}}],["constructor",{"_index":67,"title":{},"body":{"classes/PipelineBuilder.html":{},"classes/PipelineError.html":{}}}],["constructor(message",{"_index":233,"title":{},"body":{"classes/PipelineError.html":{}}}],["constructor(pipelinename",{"_index":68,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["contract",{"_index":583,"title":{},"body":{"license.html":{}}}],["convert",{"_index":454,"title":{},"body":{"coverage.html":{}}}],["copies",{"_index":550,"title":{},"body":{"license.html":{}}}],["copy",{"_index":533,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":522,"title":{},"body":{"license.html":{}}}],["cos",{"_index":445,"title":{},"body":{"coverage.html":{}}}],["cosh",{"_index":446,"title":{},"body":{"coverage.html":{}}}],["count",{"_index":155,"title":{},"body":{"classes/PipelineBuilder.html":{},"interfaces/StageInterface.html":{},"miscellaneous/enumerations.html":{}}}],["coverage",{"_index":300,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["createobject",{"_index":49,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["custom",{"_index":466,"title":{},"body":{"dependencies.html":{}}}],["damages",{"_index":580,"title":{},"body":{"license.html":{}}}],["dataset",{"_index":499,"title":{},"body":{"index.html":{}}}],["date",{"_index":20,"title":{},"body":{"interfaces/DebugBuildInterface.html":{},"classes/PipelineBuilder.html":{}}}],["datefromparts",{"_index":382,"title":{},"body":{"coverage.html":{}}}],["datefromstring",{"_index":383,"title":{},"body":{"coverage.html":{}}}],["datetoparts",{"_index":384,"title":{},"body":{"coverage.html":{}}}],["datetostring",{"_index":385,"title":{},"body":{"coverage.html":{}}}],["dayofmonth",{"_index":386,"title":{},"body":{"coverage.html":{}}}],["dayofweek",{"_index":387,"title":{},"body":{"coverage.html":{}}}],["dayofyear",{"_index":388,"title":{},"body":{"coverage.html":{}}}],["db.aggregate",{"_index":478,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["db.collection.aggregate",{"_index":476,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["deal",{"_index":537,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":588,"title":{},"body":{"license.html":{}}}],["debug",{"_index":69,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["debugbuild",{"_index":50,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["debugbuildinterface",{"_index":1,"title":{"interfaces/DebugBuildInterface.html":{}},"body":{"interfaces/DebugBuildInterface.html":{},"classes/PipelineBuilder.html":{},"coverage.html":{}}}],["debugbuildstatus",{"_index":148,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["default",{"_index":74,"title":{},"body":{"classes/PipelineBuilder.html":{},"classes/PipelineError.html":{}}}],["defined",{"_index":70,"title":{},"body":{"classes/PipelineBuilder.html":{},"classes/PipelineError.html":{}}}],["degreestoradians",{"_index":447,"title":{},"body":{"coverage.html":{}}}],["dependencies",{"_index":465,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["description",{"_index":8,"title":{},"body":{"interfaces/DebugBuildInterface.html":{},"interfaces/LookupConditionPayloadInterface.html":{},"interfaces/LookupEqualityPayloadInterface.html":{},"classes/PipelineBuilder.html":{},"classes/PipelineError.html":{},"interfaces/ProjectStageInterface.html":{},"interfaces/StageErrorInterface.html":{},"interfaces/StageInterface.html":{}}}],["dev",{"_index":525,"title":{},"body":{"license.html":{}}}],["disabledebug",{"_index":51,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["distribute",{"_index":546,"title":{},"body":{"license.html":{}}}],["divide",{"_index":331,"title":{},"body":{"coverage.html":{}}}],["documentation",{"_index":301,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["documented",{"_index":250,"title":{},"body":{"changelog.html":{}}}],["documents",{"_index":481,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["e",{"_index":209,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["e.message",{"_index":210,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["easier",{"_index":495,"title":{},"body":{"index.html":{}}}],["edit",{"_index":496,"title":{},"body":{"index.html":{}}}],["empty",{"_index":200,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["enabledebug",{"_index":52,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["enumerations",{"_index":471,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":467,"title":{},"body":{"dependencies.html":{}}}],["equal",{"_index":363,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["equality",{"_index":38,"title":{},"body":{"interfaces/LookupEqualityPayloadInterface.html":{},"coverage.html":{}}}],["error",{"_index":108,"title":{},"body":{"classes/PipelineBuilder.html":{},"classes/PipelineError.html":{}}}],["error.interface.ts",{"_index":243,"title":{},"body":{"interfaces/StageErrorInterface.html":{},"coverage.html":{}}}],["errormessage",{"_index":207,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["errors",{"_index":120,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["event",{"_index":575,"title":{},"body":{"license.html":{}}}],["examples",{"_index":518,"title":{},"body":{"index.html":{}}}],["exponent",{"_index":332,"title":{},"body":{"coverage.html":{}}}],["export",{"_index":19,"title":{},"body":{"interfaces/DebugBuildInterface.html":{},"interfaces/LookupConditionPayloadInterface.html":{},"interfaces/LookupEqualityPayloadInterface.html":{},"classes/PipelineBuilder.html":{},"classes/PipelineError.html":{},"interfaces/ProjectStageInterface.html":{},"interfaces/StageErrorInterface.html":{},"interfaces/StageInterface.html":{}}}],["express",{"_index":566,"title":{},"body":{"license.html":{}}}],["expression",{"_index":401,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["expression(equal('$id",{"_index":510,"title":{},"body":{"index.html":{}}}],["extends",{"_index":232,"title":{},"body":{"classes/PipelineError.html":{}}}],["facet",{"_index":156,"title":{},"body":{"classes/PipelineBuilder.html":{},"miscellaneous/enumerations.html":{}}}],["false",{"_index":81,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["field",{"_index":402,"title":{},"body":{"coverage.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/DebugBuildInterface.html":{},"interfaces/LookupConditionPayloadInterface.html":{},"interfaces/LookupEqualityPayloadInterface.html":{},"classes/PipelineBuilder.html":{},"classes/PipelineError.html":{},"interfaces/ProjectStageInterface.html":{},"interfaces/StageErrorInterface.html":{},"interfaces/StageInterface.html":{},"changelog.html":{},"coverage.html":{}}}],["files",{"_index":536,"title":{},"body":{"license.html":{}}}],["filter",{"_index":347,"title":{},"body":{"coverage.html":{}}}],["filter(error",{"_index":205,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["first",{"_index":348,"title":{},"body":{"coverage.html":{}}}],["firstname",{"_index":514,"title":{},"body":{"index.html":{}}}],["fitness",{"_index":571,"title":{},"body":{"license.html":{}}}],["fixes",{"_index":286,"title":{},"body":{"changelog.html":{}}}],["floor",{"_index":333,"title":{},"body":{"coverage.html":{}}}],["following",{"_index":555,"title":{},"body":{"license.html":{}}}],["foreignfield",{"_index":39,"title":{},"body":{"interfaces/LookupEqualityPayloadInterface.html":{}}}],["free",{"_index":529,"title":{},"body":{"license.html":{}}}],["functionoperator",{"_index":376,"title":{},"body":{"coverage.html":{}}}],["furnished",{"_index":553,"title":{},"body":{"license.html":{}}}],["geonear",{"_index":157,"title":{},"body":{"classes/PipelineBuilder.html":{},"miscellaneous/enumerations.html":{}}}],["getcurrentdate",{"_index":53,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["getdebugactionlist",{"_index":54,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["getname",{"_index":55,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["getpipeline",{"_index":56,"title":{},"body":{"classes/PipelineBuilder.html":{},"index.html":{}}}],["getstagetypevaluefor",{"_index":122,"title":{},"body":{"classes/PipelineBuilder.html":{},"coverage.html":{}}}],["getstagetypevaluefor(stagetypelabel",{"_index":181,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["getting",{"_index":245,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["granted",{"_index":528,"title":{},"body":{"license.html":{}}}],["graphlookup",{"_index":158,"title":{},"body":{"classes/PipelineBuilder.html":{},"miscellaneous/enumerations.html":{}}}],["greaterthan",{"_index":364,"title":{},"body":{"coverage.html":{}}}],["greaterthanequal",{"_index":365,"title":{},"body":{"coverage.html":{}}}],["group",{"_index":159,"title":{},"body":{"classes/PipelineBuilder.html":{},"miscellaneous/enumerations.html":{}}}],["guidelines",{"_index":255,"title":{},"body":{"changelog.html":{}}}],["hereby",{"_index":527,"title":{},"body":{"license.html":{}}}],["history",{"_index":90,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["historybundle",{"_index":133,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["historybundle.value",{"_index":136,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["historylist",{"_index":11,"title":{},"body":{"interfaces/DebugBuildInterface.html":{},"classes/PipelineBuilder.html":{}}}],["holders",{"_index":577,"title":{},"body":{"license.html":{}}}],["hour",{"_index":389,"title":{},"body":{"coverage.html":{}}}],["identifier",{"_index":302,"title":{},"body":{"coverage.html":{}}}],["ifnull",{"_index":371,"title":{},"body":{"coverage.html":{}}}],["ignore",{"_index":241,"title":{},"body":{"interfaces/ProjectStageInterface.html":{}}}],["implied",{"_index":567,"title":{},"body":{"license.html":{}}}],["import",{"_index":17,"title":{},"body":{"interfaces/DebugBuildInterface.html":{},"interfaces/LookupConditionPayloadInterface.html":{},"classes/PipelineBuilder.html":{},"changelog.html":{},"index.html":{}}}],["included",{"_index":560,"title":{},"body":{"license.html":{}}}],["including",{"_index":540,"title":{},"body":{"license.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"interfaces/DebugBuildInterface.html":{},"interfaces/LookupConditionPayloadInterface.html":{},"interfaces/LookupEqualityPayloadInterface.html":{},"classes/PipelineBuilder.html":{},"classes/PipelineError.html":{},"interfaces/ProjectStageInterface.html":{},"interfaces/StageErrorInterface.html":{},"interfaces/StageInterface.html":{},"miscellaneous/enumerations.html":{}}}],["indexofarray",{"_index":349,"title":{},"body":{"coverage.html":{}}}],["indexofbytes",{"_index":417,"title":{},"body":{"coverage.html":{}}}],["indexofcp",{"_index":418,"title":{},"body":{"coverage.html":{}}}],["indexstats",{"_index":160,"title":{},"body":{"classes/PipelineBuilder.html":{},"miscellaneous/enumerations.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/DebugBuildInterface.html":{},"interfaces/LookupConditionPayloadInterface.html":{},"interfaces/LookupEqualityPayloadInterface.html":{},"classes/PipelineBuilder.html":{},"classes/PipelineError.html":{},"interfaces/ProjectStageInterface.html":{},"interfaces/StageErrorInterface.html":{},"interfaces/StageInterface.html":{}}}],["interface",{"_index":0,"title":{"interfaces/DebugBuildInterface.html":{},"interfaces/LookupConditionPayloadInterface.html":{},"interfaces/LookupEqualityPayloadInterface.html":{},"interfaces/ProjectStageInterface.html":{},"interfaces/StageErrorInterface.html":{},"interfaces/StageInterface.html":{}},"body":{"interfaces/DebugBuildInterface.html":{},"interfaces/LookupConditionPayloadInterface.html":{},"interfaces/LookupEqualityPayloadInterface.html":{},"interfaces/ProjectStageInterface.html":{},"interfaces/StageErrorInterface.html":{},"interfaces/StageInterface.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/DebugBuildInterface.html":{},"interfaces/LookupConditionPayloadInterface.html":{},"interfaces/LookupEqualityPayloadInterface.html":{},"classes/PipelineBuilder.html":{},"interfaces/ProjectStageInterface.html":{},"interfaces/StageErrorInterface.html":{},"interfaces/StageInterface.html":{},"overview.html":{}}}],["interfaces/stage",{"_index":123,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["invalid",{"_index":221,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["invalidstage",{"_index":223,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["isarray",{"_index":350,"title":{},"body":{"coverage.html":{}}}],["isnumber",{"_index":455,"title":{},"body":{"coverage.html":{}}}],["isodayofweek",{"_index":390,"title":{},"body":{"coverage.html":{}}}],["isoweek",{"_index":391,"title":{},"body":{"coverage.html":{}}}],["isoweekyear",{"_index":392,"title":{},"body":{"coverage.html":{}}}],["isvalidstage",{"_index":64,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["isvalidstage(stagetovalidate",{"_index":101,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["join('\\n",{"_index":211,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["json.stringify(arglist.length",{"_index":137,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["json.stringify(stagetovalidate",{"_index":224,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["json.stringify(stagevalue",{"_index":183,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["json.stringify(this.stagelist",{"_index":197,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["key",{"_index":80,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["kind",{"_index":565,"title":{},"body":{"license.html":{}}}],["last",{"_index":351,"title":{},"body":{"coverage.html":{}}}],["lastname",{"_index":515,"title":{},"body":{"index.html":{}}}],["lessthan",{"_index":366,"title":{},"body":{"coverage.html":{}}}],["lessthanequal",{"_index":367,"title":{},"body":{"coverage.html":{}}}],["liability",{"_index":581,"title":{},"body":{"license.html":{}}}],["liable",{"_index":578,"title":{},"body":{"license.html":{}}}],["lib/.../stage",{"_index":473,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lib/environments/index.ts",{"_index":304,"title":{},"body":{"coverage.html":{}}}],["lib/errors/pipeline.error.ts",{"_index":231,"title":{},"body":{"classes/PipelineError.html":{},"coverage.html":{}}}],["lib/errors/pipeline.error.ts:8",{"_index":234,"title":{},"body":{"classes/PipelineError.html":{}}}],["lib/helpers/index.ts",{"_index":309,"title":{},"body":{"coverage.html":{}}}],["lib/interfaces/debug",{"_index":6,"title":{},"body":{"interfaces/DebugBuildInterface.html":{},"coverage.html":{}}}],["lib/interfaces/lookup",{"_index":29,"title":{},"body":{"interfaces/LookupConditionPayloadInterface.html":{},"interfaces/LookupEqualityPayloadInterface.html":{},"coverage.html":{}}}],["lib/interfaces/project",{"_index":239,"title":{},"body":{"interfaces/ProjectStageInterface.html":{},"coverage.html":{}}}],["lib/interfaces/stage",{"_index":242,"title":{},"body":{"interfaces/StageErrorInterface.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["lib/interfaces/stage.interface.ts",{"_index":244,"title":{},"body":{"interfaces/StageInterface.html":{},"coverage.html":{}}}],["lib/main.ts",{"_index":44,"title":{},"body":{"classes/PipelineBuilder.html":{},"coverage.html":{}}}],["lib/main.ts:101",{"_index":86,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["lib/main.ts:109",{"_index":91,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["lib/main.ts:116",{"_index":84,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["lib/main.ts:124",{"_index":83,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["lib/main.ts:132",{"_index":95,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["lib/main.ts:143",{"_index":75,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["lib/main.ts:166",{"_index":92,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["lib/main.ts:175",{"_index":99,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["lib/main.ts:20",{"_index":93,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["lib/main.ts:200",{"_index":102,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["lib/main.ts:227",{"_index":78,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["lib/main.ts:236",{"_index":85,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["lib/main.ts:244",{"_index":110,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["lib/main.ts:25",{"_index":94,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["lib/main.ts:30",{"_index":98,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["lib/main.ts:35",{"_index":82,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["lib/main.ts:43",{"_index":71,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["lib/main.ts:72",{"_index":114,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["lib/operators/accumulator/index.ts",{"_index":319,"title":{},"body":{"coverage.html":{}}}],["lib/operators/arithmetic/index.ts",{"_index":328,"title":{},"body":{"coverage.html":{}}}],["lib/operators/array/index.ts",{"_index":343,"title":{},"body":{"coverage.html":{}}}],["lib/operators/boolean/index.ts",{"_index":360,"title":{},"body":{"coverage.html":{}}}],["lib/operators/comparison/index.ts",{"_index":361,"title":{},"body":{"coverage.html":{}}}],["lib/operators/conditional/index.ts",{"_index":369,"title":{},"body":{"coverage.html":{}}}],["lib/operators/custom",{"_index":373,"title":{},"body":{"coverage.html":{}}}],["lib/operators/data",{"_index":377,"title":{},"body":{"coverage.html":{}}}],["lib/operators/date/index.ts",{"_index":381,"title":{},"body":{"coverage.html":{}}}],["lib/operators/misc/index.ts",{"_index":400,"title":{},"body":{"coverage.html":{}}}],["lib/operators/set/index.ts",{"_index":407,"title":{},"body":{"coverage.html":{}}}],["lib/operators/string/index.ts",{"_index":415,"title":{},"body":{"coverage.html":{}}}],["lib/operators/trigonometry/index.ts",{"_index":437,"title":{},"body":{"coverage.html":{}}}],["lib/operators/type/index.ts",{"_index":453,"title":{},"body":{"coverage.html":{}}}],["license",{"_index":520,"title":{"license.html":{}},"body":{"license.html":{}}}],["limit",{"_index":161,"title":{},"body":{"classes/PipelineBuilder.html":{},"interfaces/StageInterface.html":{},"miscellaneous/enumerations.html":{}}}],["limitation",{"_index":541,"title":{},"body":{"license.html":{}}}],["limited",{"_index":568,"title":{},"body":{"license.html":{}}}],["list",{"_index":87,"title":{},"body":{"classes/PipelineBuilder.html":{},"interfaces/ProjectStageInterface.html":{}}}],["listsessions",{"_index":162,"title":{},"body":{"classes/PipelineBuilder.html":{},"miscellaneous/enumerations.html":{}}}],["literal",{"_index":13,"title":{},"body":{"interfaces/DebugBuildInterface.html":{},"coverage.html":{}}}],["localfield",{"_index":40,"title":{},"body":{"interfaces/LookupEqualityPayloadInterface.html":{}}}],["log",{"_index":65,"title":{},"body":{"classes/PipelineBuilder.html":{},"coverage.html":{}}}],["log(type",{"_index":106,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["log10",{"_index":334,"title":{},"body":{"coverage.html":{}}}],["logs_enabled",{"_index":121,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["logsenabled",{"_index":57,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["lookup",{"_index":163,"title":{},"body":{"classes/PipelineBuilder.html":{},"interfaces/StageInterface.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["lookupconditionpayloadinterface",{"_index":28,"title":{"interfaces/LookupConditionPayloadInterface.html":{}},"body":{"interfaces/LookupConditionPayloadInterface.html":{},"coverage.html":{}}}],["lookupconditionstage",{"_index":310,"title":{},"body":{"coverage.html":{}}}],["lookupequalitypayloadinterface",{"_index":37,"title":{"interfaces/LookupEqualityPayloadInterface.html":{}},"body":{"interfaces/LookupEqualityPayloadInterface.html":{},"coverage.html":{}}}],["lookupequalitystage",{"_index":311,"title":{},"body":{"coverage.html":{}}}],["ltrim",{"_index":419,"title":{},"body":{"coverage.html":{}}}],["making",{"_index":491,"title":{},"body":{"index.html":{}}}],["mapoperator",{"_index":352,"title":{},"body":{"coverage.html":{}}}],["match",{"_index":164,"title":{},"body":{"classes/PipelineBuilder.html":{},"interfaces/StageInterface.html":{},"miscellaneous/enumerations.html":{}}}],["matching",{"_index":26,"title":{},"body":{"interfaces/DebugBuildInterface.html":{},"interfaces/LookupConditionPayloadInterface.html":{},"interfaces/LookupEqualityPayloadInterface.html":{},"classes/PipelineBuilder.html":{},"classes/PipelineError.html":{},"interfaces/ProjectStageInterface.html":{},"interfaces/StageErrorInterface.html":{},"interfaces/StageInterface.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{}}}],["max",{"_index":322,"title":{},"body":{"coverage.html":{}}}],["merchantability",{"_index":570,"title":{},"body":{"license.html":{}}}],["merge",{"_index":165,"title":{},"body":{"classes/PipelineBuilder.html":{},"miscellaneous/enumerations.html":{},"license.html":{}}}],["mergeobjects",{"_index":403,"title":{},"body":{"coverage.html":{}}}],["message",{"_index":220,"title":{},"body":{"classes/PipelineBuilder.html":{},"classes/PipelineError.html":{},"interfaces/StageErrorInterface.html":{}}}],["messagelist",{"_index":109,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["meta",{"_index":404,"title":{},"body":{"coverage.html":{}}}],["method",{"_index":477,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["methods",{"_index":63,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["mike",{"_index":524,"title":{},"body":{"license.html":{}}}],["millisecond",{"_index":393,"title":{},"body":{"coverage.html":{}}}],["min",{"_index":323,"title":{},"body":{"coverage.html":{}}}],["minute",{"_index":394,"title":{},"body":{"coverage.html":{}}}],["miscellaneous",{"_index":470,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["mit",{"_index":521,"title":{},"body":{"license.html":{}}}],["mod",{"_index":335,"title":{},"body":{"coverage.html":{}}}],["modify",{"_index":544,"title":{},"body":{"license.html":{}}}],["modules",{"_index":589,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["moment",{"_index":116,"title":{},"body":{"classes/PipelineBuilder.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{}}}],["moment().tz('europe/paris').format",{"_index":228,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["mongodb",{"_index":485,"title":{},"body":{"index.html":{}}}],["month",{"_index":395,"title":{},"body":{"coverage.html":{}}}],["more",{"_index":492,"title":{},"body":{"index.html":{}}}],["much",{"_index":494,"title":{},"body":{"index.html":{}}}],["multiply",{"_index":336,"title":{},"body":{"coverage.html":{}}}],["mynewpipeline",{"_index":507,"title":{},"body":{"index.html":{}}}],["n",{"_index":230,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["name",{"_index":73,"title":{},"body":{"classes/PipelineBuilder.html":{},"classes/PipelineError.html":{}}}],["naturallog",{"_index":337,"title":{},"body":{"coverage.html":{}}}],["new",{"_index":185,"title":{},"body":{"classes/PipelineBuilder.html":{},"coverage.html":{},"index.html":{}}}],["newobject",{"_index":79,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["newstagetoadd",{"_index":190,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["noninfringement",{"_index":574,"title":{},"body":{"license.html":{}}}],["notable",{"_index":248,"title":{},"body":{"changelog.html":{}}}],["notequal",{"_index":368,"title":{},"body":{"coverage.html":{}}}],["notice",{"_index":558,"title":{},"body":{"license.html":{}}}],["npm",{"_index":502,"title":{},"body":{"index.html":{}}}],["null",{"_index":105,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["object",{"_index":226,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["object.keys(stagetovalidate)[0].replace",{"_index":216,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["object[key",{"_index":227,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["objecttoarray",{"_index":353,"title":{},"body":{"coverage.html":{}}}],["obtaining",{"_index":532,"title":{},"body":{"license.html":{}}}],["occurred",{"_index":237,"title":{},"body":{"classes/PipelineError.html":{}}}],["optional",{"_index":32,"title":{},"body":{"interfaces/LookupConditionPayloadInterface.html":{},"classes/PipelineBuilder.html":{},"classes/PipelineError.html":{},"interfaces/StageInterface.html":{}}}],["order",{"_index":500,"title":{},"body":{"index.html":{}}}],["otherwise",{"_index":585,"title":{},"body":{"license.html":{}}}],["out",{"_index":166,"title":{},"body":{"classes/PipelineBuilder.html":{},"miscellaneous/enumerations.html":{},"license.html":{}}}],["overview",{"_index":590,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":464,"title":{"dependencies.html":{}},"body":{"index.html":{}}}],["param",{"_index":125,"title":{},"body":{"classes/PipelineBuilder.html":{},"classes/PipelineError.html":{}}}],["parameters",{"_index":72,"title":{},"body":{"classes/PipelineBuilder.html":{},"classes/PipelineError.html":{}}}],["particular",{"_index":572,"title":{},"body":{"license.html":{}}}],["pass",{"_index":482,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["payload.interface.ts",{"_index":31,"title":{},"body":{"interfaces/LookupConditionPayloadInterface.html":{},"interfaces/LookupEqualityPayloadInterface.html":{},"coverage.html":{}}}],["permission",{"_index":526,"title":{},"body":{"license.html":{}}}],["permit",{"_index":551,"title":{},"body":{"license.html":{}}}],["person",{"_index":531,"title":{},"body":{"license.html":{}}}],["persons",{"_index":552,"title":{},"body":{"license.html":{}}}],["pipeline",{"_index":24,"title":{},"body":{"interfaces/DebugBuildInterface.html":{},"interfaces/LookupConditionPayloadInterface.html":{},"classes/PipelineBuilder.html":{},"classes/PipelineError.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["pipeline:\\n",{"_index":196,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["pipelinebuilder",{"_index":42,"title":{"classes/PipelineBuilder.html":{}},"body":{"classes/PipelineBuilder.html":{},"coverage.html":{},"index.html":{}}}],["pipelinebuilder('name",{"_index":508,"title":{},"body":{"index.html":{}}}],["pipelinebuilt",{"_index":100,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["pipelinebuilt.length",{"_index":198,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["pipelinebuilt.map",{"_index":202,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["pipelineerror",{"_index":119,"title":{"classes/PipelineError.html":{}},"body":{"classes/PipelineBuilder.html":{},"classes/PipelineError.html":{},"coverage.html":{}}}],["pipelineerror('error",{"_index":199,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["pipelineerror('impossible",{"_index":186,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["pipelineerror(errormessage",{"_index":214,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["pipelinename",{"_index":58,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["pipelines",{"_index":490,"title":{},"body":{"index.html":{}}}],["plancachestats",{"_index":167,"title":{},"body":{"classes/PipelineBuilder.html":{},"miscellaneous/enumerations.html":{}}}],["portions",{"_index":562,"title":{},"body":{"license.html":{}}}],["pow",{"_index":338,"title":{},"body":{"coverage.html":{}}}],["private",{"_index":48,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["project",{"_index":33,"title":{},"body":{"interfaces/LookupConditionPayloadInterface.html":{},"classes/PipelineBuilder.html":{},"interfaces/StageInterface.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["projectstageinterface",{"_index":35,"title":{"interfaces/ProjectStageInterface.html":{}},"body":{"interfaces/LookupConditionPayloadInterface.html":{},"interfaces/ProjectStageInterface.html":{},"coverage.html":{}}}],["projectstageinterface,stageinterface",{"_index":36,"title":{},"body":{"interfaces/LookupConditionPayloadInterface.html":{}}}],["properties",{"_index":10,"title":{},"body":{"interfaces/DebugBuildInterface.html":{},"interfaces/LookupConditionPayloadInterface.html":{},"interfaces/LookupEqualityPayloadInterface.html":{},"classes/PipelineBuilder.html":{},"classes/PipelineError.html":{},"interfaces/ProjectStageInterface.html":{},"interfaces/StageErrorInterface.html":{},"interfaces/StageInterface.html":{}}}],["provided",{"_index":563,"title":{},"body":{"license.html":{}}}],["public",{"_index":45,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["publish",{"_index":545,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":573,"title":{},"body":{"license.html":{}}}],["push",{"_index":324,"title":{},"body":{"coverage.html":{}}}],["radianstodegrees",{"_index":448,"title":{},"body":{"coverage.html":{}}}],["rand",{"_index":405,"title":{},"body":{"coverage.html":{}}}],["range",{"_index":354,"title":{},"body":{"coverage.html":{}}}],["readable",{"_index":493,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":46,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["redact",{"_index":168,"title":{},"body":{"classes/PipelineBuilder.html":{},"miscellaneous/enumerations.html":{}}}],["reduce",{"_index":355,"title":{},"body":{"coverage.html":{}}}],["regexfind",{"_index":420,"title":{},"body":{"coverage.html":{}}}],["regexfindall",{"_index":421,"title":{},"body":{"coverage.html":{}}}],["regexmatch",{"_index":422,"title":{},"body":{"coverage.html":{}}}],["replaceall",{"_index":423,"title":{},"body":{"coverage.html":{}}}],["replaceone",{"_index":424,"title":{},"body":{"coverage.html":{}}}],["replaceroot",{"_index":169,"title":{},"body":{"classes/PipelineBuilder.html":{},"miscellaneous/enumerations.html":{}}}],["replacewith",{"_index":170,"title":{},"body":{"classes/PipelineBuilder.html":{},"miscellaneous/enumerations.html":{}}}],["require",{"_index":288,"title":{},"body":{"changelog.html":{}}}],["require('moment",{"_index":117,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["reset",{"_index":96,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["resetpipeline",{"_index":59,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["restriction",{"_index":539,"title":{},"body":{"license.html":{}}}],["result",{"_index":25,"title":{},"body":{"interfaces/DebugBuildInterface.html":{},"interfaces/LookupConditionPayloadInterface.html":{},"interfaces/LookupEqualityPayloadInterface.html":{},"classes/PipelineBuilder.html":{},"classes/PipelineError.html":{},"interfaces/ProjectStageInterface.html":{},"interfaces/StageErrorInterface.html":{},"interfaces/StageInterface.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{}}}],["results",{"_index":27,"title":{},"body":{"interfaces/DebugBuildInterface.html":{},"interfaces/LookupConditionPayloadInterface.html":{},"interfaces/LookupEqualityPayloadInterface.html":{},"classes/PipelineBuilder.html":{},"classes/PipelineError.html":{},"interfaces/ProjectStageInterface.html":{},"interfaces/StageErrorInterface.html":{},"interfaces/StageInterface.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{}}}],["return",{"_index":132,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["returns",{"_index":104,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["reversearray",{"_index":356,"title":{},"body":{"coverage.html":{}}}],["rights",{"_index":542,"title":{},"body":{"license.html":{}}}],["round",{"_index":339,"title":{},"body":{"coverage.html":{}}}],["rtrim",{"_index":425,"title":{},"body":{"coverage.html":{}}}],["s",{"_index":203,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["sample",{"_index":171,"title":{},"body":{"classes/PipelineBuilder.html":{},"miscellaneous/enumerations.html":{}}}],["samplerate",{"_index":406,"title":{},"body":{"coverage.html":{}}}],["saveactiontodebughistorylist",{"_index":66,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["saveactiontodebughistorylist(action",{"_index":112,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["savetodebugactionlist",{"_index":144,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["script",{"_index":295,"title":{},"body":{"changelog.html":{}}}],["search",{"_index":172,"title":{},"body":{"classes/PipelineBuilder.html":{},"miscellaneous/enumerations.html":{}}}],["second",{"_index":396,"title":{},"body":{"coverage.html":{}}}],["see",{"_index":251,"title":{},"body":{"changelog.html":{}}}],["sell",{"_index":549,"title":{},"body":{"license.html":{}}}],["sequence",{"_index":484,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["set",{"_index":173,"title":{},"body":{"classes/PipelineBuilder.html":{},"miscellaneous/enumerations.html":{}}}],["setdifference",{"_index":410,"title":{},"body":{"coverage.html":{}}}],["setequals",{"_index":411,"title":{},"body":{"coverage.html":{}}}],["setintersection",{"_index":412,"title":{},"body":{"coverage.html":{}}}],["setissubset",{"_index":413,"title":{},"body":{"coverage.html":{}}}],["setunion",{"_index":414,"title":{},"body":{"coverage.html":{}}}],["shall",{"_index":559,"title":{},"body":{"license.html":{}}}],["simplify",{"_index":489,"title":{},"body":{"index.html":{}}}],["sin",{"_index":449,"title":{},"body":{"coverage.html":{}}}],["sinh",{"_index":450,"title":{},"body":{"coverage.html":{}}}],["size",{"_index":357,"title":{},"body":{"coverage.html":{}}}],["size/index.ts",{"_index":378,"title":{},"body":{"coverage.html":{}}}],["skip",{"_index":174,"title":{},"body":{"classes/PipelineBuilder.html":{},"interfaces/StageInterface.html":{},"miscellaneous/enumerations.html":{}}}],["slice",{"_index":358,"title":{},"body":{"coverage.html":{}}}],["software",{"_index":534,"title":{},"body":{"license.html":{}}}],["soon",{"_index":516,"title":{},"body":{"index.html":{}}}],["sort",{"_index":175,"title":{},"body":{"classes/PipelineBuilder.html":{},"interfaces/StageInterface.html":{},"miscellaneous/enumerations.html":{}}}],["sortbycount",{"_index":176,"title":{},"body":{"classes/PipelineBuilder.html":{},"miscellaneous/enumerations.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/DebugBuildInterface.html":{},"interfaces/LookupConditionPayloadInterface.html":{},"interfaces/LookupEqualityPayloadInterface.html":{},"classes/PipelineBuilder.html":{},"classes/PipelineError.html":{},"interfaces/ProjectStageInterface.html":{},"interfaces/StageErrorInterface.html":{},"interfaces/StageInterface.html":{}}}],["sourcelist",{"_index":34,"title":{},"body":{"interfaces/LookupConditionPayloadInterface.html":{}}}],["split",{"_index":426,"title":{},"body":{"coverage.html":{}}}],["sqrt",{"_index":340,"title":{},"body":{"coverage.html":{}}}],["stage",{"_index":188,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["stage.interface.ts",{"_index":240,"title":{},"body":{"interfaces/ProjectStageInterface.html":{},"coverage.html":{}}}],["stageerrorinterface",{"_index":97,"title":{"interfaces/StageErrorInterface.html":{}},"body":{"classes/PipelineBuilder.html":{},"interfaces/StageErrorInterface.html":{},"coverage.html":{}}}],["stageerrorlist",{"_index":60,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["stageinterface",{"_index":18,"title":{"interfaces/StageInterface.html":{}},"body":{"interfaces/DebugBuildInterface.html":{},"interfaces/LookupConditionPayloadInterface.html":{},"classes/PipelineBuilder.html":{},"interfaces/StageInterface.html":{},"coverage.html":{}}}],["stagelist",{"_index":61,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["stages",{"_index":475,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stagetovalidate",{"_index":103,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["stagetype",{"_index":215,"title":{},"body":{"classes/PipelineBuilder.html":{},"interfaces/StageErrorInterface.html":{}}}],["stagetypeenum",{"_index":472,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stagetypelabel",{"_index":76,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["stagetypevalue",{"_index":180,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["stagevalue",{"_index":77,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["standard",{"_index":252,"title":{},"body":{"changelog.html":{}}}],["started",{"_index":246,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["statements",{"_index":303,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":12,"title":{},"body":{"interfaces/DebugBuildInterface.html":{},"classes/PipelineBuilder.html":{}}}],["stddevpop",{"_index":325,"title":{},"body":{"coverage.html":{}}}],["stddevsamp",{"_index":326,"title":{},"body":{"coverage.html":{}}}],["stored",{"_index":89,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["strcasecmp",{"_index":427,"title":{},"body":{"coverage.html":{}}}],["string",{"_index":21,"title":{},"body":{"interfaces/DebugBuildInterface.html":{},"interfaces/LookupConditionPayloadInterface.html":{},"interfaces/LookupEqualityPayloadInterface.html":{},"classes/PipelineBuilder.html":{},"classes/PipelineError.html":{},"interfaces/StageErrorInterface.html":{}}}],["strlenbytes",{"_index":428,"title":{},"body":{"coverage.html":{}}}],["strlencp",{"_index":429,"title":{},"body":{"coverage.html":{}}}],["subject",{"_index":554,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":547,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":561,"title":{},"body":{"license.html":{}}}],["substr",{"_index":430,"title":{},"body":{"coverage.html":{}}}],["substrbytes",{"_index":431,"title":{},"body":{"coverage.html":{}}}],["substrcp",{"_index":432,"title":{},"body":{"coverage.html":{}}}],["subtract",{"_index":341,"title":{},"body":{"coverage.html":{}}}],["sum",{"_index":327,"title":{},"body":{"coverage.html":{}}}],["super(message",{"_index":236,"title":{},"body":{"classes/PipelineError.html":{}}}],["switch",{"_index":372,"title":{},"body":{"coverage.html":{}}}],["table",{"_index":463,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":462,"title":{},"body":{"coverage.html":{}}}],["tan",{"_index":451,"title":{},"body":{"coverage.html":{}}}],["tanh",{"_index":452,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":498,"title":{},"body":{"index.html":{}}}],["this.createobject(stagetypevalue",{"_index":191,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["this.debugbuild",{"_index":140,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["this.debugbuild.historylist",{"_index":145,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["this.debugbuild.historylist.push(historybundle",{"_index":141,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["this.debugbuild.status",{"_index":130,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["this.getcurrentdate",{"_index":134,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["this.isvalidstage(s",{"_index":204,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["this.log('error",{"_index":212,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["this.log('info",{"_index":143,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["this.logsenabled",{"_index":128,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["this.pipelinename",{"_index":126,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["this.saveactiontodebughistorylist",{"_index":219,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["this.saveactiontodebughistorylist('addstage",{"_index":193,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["this.saveactiontodebughistorylist('constructor",{"_index":131,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["this.saveactiontodebughistorylist('disabledebug",{"_index":149,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["this.saveactiontodebughistorylist('enabledebug",{"_index":147,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["this.saveactiontodebughistorylist('getname",{"_index":146,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["this.saveactiontodebughistorylist('getpipeline",{"_index":194,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["this.saveactiontodebughistorylist('getstagetypevaluefor",{"_index":182,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["this.saveactiontodebughistorylist('resetpipeline",{"_index":150,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["this.saveactiontodebughistorylist('stageerrorlist",{"_index":213,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["this.stageerrorlist",{"_index":201,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["this.stageerrorlist.length",{"_index":206,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["this.stageerrorlist.map",{"_index":208,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["this.stagelist",{"_index":127,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["this.stagelist.push(newstagetoadd",{"_index":192,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["this.verifypipelinevalidity([...this.stagelist",{"_index":195,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["through",{"_index":483,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["throw",{"_index":184,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["timezone",{"_index":118,"title":{},"body":{"classes/PipelineBuilder.html":{},"dependencies.html":{}}}],["tobool",{"_index":456,"title":{},"body":{"coverage.html":{}}}],["todate",{"_index":397,"title":{},"body":{"coverage.html":{}}}],["todecimal",{"_index":457,"title":{},"body":{"coverage.html":{}}}],["todouble",{"_index":458,"title":{},"body":{"coverage.html":{}}}],["toint",{"_index":459,"title":{},"body":{"coverage.html":{}}}],["tolong",{"_index":460,"title":{},"body":{"coverage.html":{}}}],["tolower",{"_index":433,"title":{},"body":{"coverage.html":{}}}],["toobjectid",{"_index":461,"title":{},"body":{"coverage.html":{}}}],["tort",{"_index":584,"title":{},"body":{"license.html":{}}}],["tostring",{"_index":434,"title":{},"body":{"coverage.html":{}}}],["toupper",{"_index":435,"title":{},"body":{"coverage.html":{}}}],["treated",{"_index":222,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["treatedstagelist",{"_index":217,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["treatedstagelist.includes(stagetype",{"_index":218,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["trim",{"_index":436,"title":{},"body":{"coverage.html":{}}}],["true",{"_index":129,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["trunc",{"_index":342,"title":{},"body":{"coverage.html":{}}}],["type",{"_index":14,"title":{},"body":{"interfaces/DebugBuildInterface.html":{},"interfaces/LookupConditionPayloadInterface.html":{},"interfaces/LookupEqualityPayloadInterface.html":{},"classes/PipelineBuilder.html":{},"classes/PipelineError.html":{},"interfaces/ProjectStageInterface.html":{},"interfaces/StageErrorInterface.html":{},"interfaces/StageInterface.html":{},"coverage.html":{}}}],["type.interface",{"_index":124,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["type.interface.ts",{"_index":314,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["unionwith",{"_index":177,"title":{},"body":{"classes/PipelineBuilder.html":{},"miscellaneous/enumerations.html":{}}}],["unset",{"_index":178,"title":{},"body":{"classes/PipelineBuilder.html":{},"interfaces/StageInterface.html":{},"miscellaneous/enumerations.html":{}}}],["unwind",{"_index":179,"title":{},"body":{"classes/PipelineBuilder.html":{},"miscellaneous/enumerations.html":{}}}],["usage",{"_index":503,"title":{},"body":{"index.html":{}}}],["use",{"_index":543,"title":{},"body":{"license.html":{}}}],["userid",{"_index":511,"title":{},"body":{"index.html":{}}}],["utils",{"_index":225,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["valid",{"_index":189,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["value",{"_index":23,"title":{},"body":{"interfaces/DebugBuildInterface.html":{},"classes/PipelineBuilder.html":{},"classes/PipelineError.html":{},"miscellaneous/enumerations.html":{}}}],["variable",{"_index":305,"title":{},"body":{"coverage.html":{}}}],["verify",{"_index":501,"title":{},"body":{"index.html":{}}}],["verifypipelinevalidity",{"_index":62,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["version",{"_index":253,"title":{},"body":{"changelog.html":{}}}],["void",{"_index":111,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["warn",{"_index":107,"title":{},"body":{"classes/PipelineBuilder.html":{}}}],["warranties",{"_index":569,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":564,"title":{},"body":{"license.html":{}}}],["week",{"_index":398,"title":{},"body":{"coverage.html":{}}}],["whether",{"_index":582,"title":{},"body":{"license.html":{}}}],["without",{"_index":538,"title":{},"body":{"license.html":{}}}],["year",{"_index":399,"title":{},"body":{"coverage.html":{}}}],["yes",{"_index":235,"title":{},"body":{"classes/PipelineError.html":{}}}],["zip",{"_index":359,"title":{},"body":{"coverage.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/DebugBuildInterface.html":{"url":"interfaces/DebugBuildInterface.html","title":"interface - DebugBuildInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DebugBuildInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/interfaces/debug-build.interface.ts\n        \n\n            \n                Description\n            \n            \n                interface DebugBuildInterface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        historyList\n                                \n                                \n                                        status\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        historyList\n                                    \n                                \n                                \n                                    \n                                        historyList:     literal type[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    historyList\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                    \n                                \n                                \n                                    \n                                        status:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    status\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {StageInterface} from \"./\";\n\n/**\n * interface DebugBuildInterface\n */\nexport interface DebugBuildInterface {\n    /**\n     * status\n     */\n    status: boolean;\n    /**\n     * historyList\n     */\n    historyList: {\n        date: string;\n        action: string;\n        value?: any;\n        pipeline?: StageInterface[];\n    }[]\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LookupConditionPayloadInterface.html":{"url":"interfaces/LookupConditionPayloadInterface.html","title":"interface - LookupConditionPayloadInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  LookupConditionPayloadInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/interfaces/lookup-condition-payload.interface.ts\n        \n\n            \n                Description\n            \n            \n                interface LookupConditionPayloadInterface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        as\n                                \n                                \n                                        from\n                                \n                                \n                                            Optional\n                                        pipeline\n                                \n                                \n                                            Optional\n                                        project\n                                \n                                \n                                            Optional\n                                        sourceList\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        as\n                                    \n                                \n                                \n                                    \n                                        as:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    as\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        from\n                                    \n                                \n                                \n                                    \n                                        from:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    from\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pipeline\n                                    \n                                \n                                \n                                    \n                                        pipeline:         StageInterface[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         StageInterface[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    pipeline\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        project\n                                    \n                                \n                                \n                                    \n                                        project:         ProjectStageInterface\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ProjectStageInterface\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    project\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sourceList\n                                    \n                                \n                                \n                                    \n                                        sourceList:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    sourceList\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {ProjectStageInterface,StageInterface} from \"./\";\n\n/**\n * interface LookupConditionPayloadInterface\n */\nexport interface LookupConditionPayloadInterface {\n    /**\n     * from\n     */\n    from: string;\n    /**\n     * sourceList\n     */\n    sourceList?: string[];\n    /**\n     * project\n     */\n    project?: ProjectStageInterface;\n    /**\n     * pipeline\n     */\n    pipeline?: StageInterface[];\n    /**\n     * as\n     */\n    as: string\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LookupEqualityPayloadInterface.html":{"url":"interfaces/LookupEqualityPayloadInterface.html","title":"interface - LookupEqualityPayloadInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  LookupEqualityPayloadInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/interfaces/lookup-equality-payload.interface.ts\n        \n\n            \n                Description\n            \n            \n                interface LookupEqualityPayloadInterface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        as\n                                \n                                \n                                        foreignField\n                                \n                                \n                                        from\n                                \n                                \n                                        localField\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        as\n                                    \n                                \n                                \n                                    \n                                        as:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    as\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        foreignField\n                                    \n                                \n                                \n                                    \n                                        foreignField:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    foreignField\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        from\n                                    \n                                \n                                \n                                    \n                                        from:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    from\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        localField\n                                    \n                                \n                                \n                                    \n                                        localField:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    localField\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface LookupEqualityPayloadInterface {\n    /**\n     * from\n     */\n    from: string;\n    /**\n     * localField\n     */\n    localField: string;\n    /**\n     * foreignField\n     */\n    foreignField: string;\n    /**\n     * as\n     */\n    as: string\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PipelineBuilder.html":{"url":"classes/PipelineBuilder.html","title":"class - PipelineBuilder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PipelineBuilder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/main.ts\n        \n\n            \n                Description\n            \n            \n                PipelineBuilder\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                addStage\n                            \n                            \n                                    Private\n                                    Readonly\n                                createObject\n                            \n                            \n                                    Private\n                                debugBuild\n                            \n                            \n                                    Public\n                                    Readonly\n                                disableDebug\n                            \n                            \n                                    Public\n                                    Readonly\n                                enableDebug\n                            \n                            \n                                    Private\n                                getCurrentDate\n                            \n                            \n                                    Public\n                                    Readonly\n                                getDebugActionList\n                            \n                            \n                                    Public\n                                    Readonly\n                                getName\n                            \n                            \n                                    Public\n                                    Readonly\n                                getPipeline\n                            \n                            \n                                    Private\n                                    Readonly\n                                logsEnabled\n                            \n                            \n                                    Private\n                                    Readonly\n                                pipelineName\n                            \n                            \n                                    Public\n                                    Readonly\n                                resetPipeline\n                            \n                            \n                                    Private\n                                stageErrorList\n                            \n                            \n                                    Private\n                                stageList\n                            \n                            \n                                    Private\n                                    Readonly\n                                verifyPipelineValidity\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                isValidStage\n                            \n                            \n                                    Private\n                                log\n                            \n                            \n                                    Private\n                                saveActionToDebugHistoryList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pipelineName: string, debug, logsEnabled)\n                    \n                \n                        \n                            \n                                Defined in lib/main.ts:43\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pipelineName\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        debug\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logsEnabled\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            addStage\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in lib/main.ts:143\n                            \n                        \n\n                \n                    \n                        addStage\n\n                    \n                \n\n                    \n                        \n                          \n                                  Parameters :\n                                  \n                                      \n                                          \n                                                Name\n                                          \n                                      \n                                      \n                                                \n                                                        stageTypeLabel\n                                                \n                                                \n                                                        stageValue\n                                                \n                                      \n                                  \n                          \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            createObject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in lib/main.ts:227\n                            \n                        \n\n                \n                    \n                        newObject\n\n                    \n                \n\n                    \n                        \n                          \n                                  Parameters :\n                                  \n                                      \n                                          \n                                                Name\n                                          \n                                      \n                                      \n                                                \n                                                        key\n                                                \n                                                \n                                                        value\n                                                \n                                      \n                                  \n                          \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            debugBuild\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         DebugBuildInterface\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        status: false,\n        historyList: []\n    }\n                        \n                    \n                        \n                            \n                                    Defined in lib/main.ts:35\n                            \n                        \n\n                \n                    \n                        debugBuild\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            disableDebug\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in lib/main.ts:124\n                            \n                        \n\n                \n                    \n                        disableDebug\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            enableDebug\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in lib/main.ts:116\n                            \n                        \n\n                \n                    \n                        enableDebug\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            getCurrentDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in lib/main.ts:236\n                            \n                        \n\n                \n                    \n                        getCurrentDate\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            getDebugActionList\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in lib/main.ts:101\n                            \n                        \n\n                \n                    \n                        Get the list of all actions stored in the debug history list\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            getName\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in lib/main.ts:109\n                            \n                        \n\n                \n                    \n                        getName\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            getPipeline\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in lib/main.ts:166\n                            \n                        \n\n                \n                    \n                        getPipeline\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            logsEnabled\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/main.ts:20\n                            \n                        \n\n                \n                    \n                        logsEnabled\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            pipelineName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/main.ts:25\n                            \n                        \n\n                \n                    \n                        pipelineName\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            resetPipeline\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in lib/main.ts:132\n                            \n                        \n\n                \n                    \n                        reset\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            stageErrorList\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         StageErrorInterface[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in lib/main.ts:43\n                            \n                        \n\n                \n                    \n                        stageErrorList\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            stageList\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         StageInterface[]\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/main.ts:30\n                            \n                        \n\n                \n                    \n                        StageList\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            verifyPipelineValidity\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in lib/main.ts:175\n                            \n                        \n\n                \n                    \n                        verifyPipelineValidity\n\n                    \n                \n\n                    \n                        \n                          \n                                  Parameters :\n                                  \n                                      \n                                          \n                                                Name\n                                          \n                                      \n                                      \n                                                \n                                                        pipelineBuilt\n                                                \n                                      \n                                  \n                          \n                        \n                    \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            isValidStage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isValidStage(stageToValidate: StageInterface)\n                \n            \n\n\n            \n                \n                    Defined in lib/main.ts:200\n                \n            \n\n\n            \n                \n                    isValidStage\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    stageToValidate\n                                    \n                                                StageInterface\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         null | StageErrorInterface\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            log\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    log(type: \"info\" | \"warn\" | \"error\", ...messageList: any[])\n                \n            \n\n\n            \n                \n                    Defined in lib/main.ts:244\n                \n            \n\n\n            \n                \n                    log\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                            \"info\" | \"warn\" | \"error\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    messageList\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            saveActionToDebugHistoryList\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    saveActionToDebugHistoryList(action: string, ...argList: any[])\n                \n            \n\n\n            \n                \n                    Defined in lib/main.ts:72\n                \n            \n\n\n            \n                \n                    saveActionToDebugHistoryList\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    action\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    argList\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        const moment = require('moment-timezone');\nimport {\n    DebugBuildInterface,\n    StageErrorInterface,\n    StageInterface\n} from \"./interfaces\";\nimport { PipelineError } from \"./errors\";\nimport { LOGS_ENABLED } from './';\nimport { getStageTypeValueFor } from \"./interfaces/stage-type.interface\";\n\n\n/**\n * PipelineBuilder\n */\nexport class PipelineBuilder {\n    /**\n     * logsEnabled\n     * @private\n     */\n    private readonly logsEnabled: boolean;\n    /**\n     * pipelineName\n     * @private\n     */\n    private readonly pipelineName: string;\n    /**\n     * StageList\n     * @private\n     */\n    private stageList: StageInterface[];\n    /**\n     * debugBuild\n     * @private\n     */\n    private debugBuild: DebugBuildInterface = {\n        status: false,\n        historyList: []\n    };\n    /**\n     * stageErrorList\n     * @private\n     */\n    private stageErrorList: StageErrorInterface[] = [];\n\n    /**\n     * constructor\n     * @param pipelineName\n     * @param logsEnabled\n     * @param debug\n     */\n    constructor(\n        pipelineName: string,\n        debug = false,\n        logsEnabled = false\n    ) {\n        this.pipelineName = pipelineName;\n        this.stageList = [];\n        this.logsEnabled = logsEnabled\n            ? logsEnabled\n            : (LOGS_ENABLED === 'true');\n        this.debugBuild.status = debug;\n\n        this.saveActionToDebugHistoryList('constructor', { debug, logsEnabled });\n    }\n\n    /**\n     * saveActionToDebugHistoryList\n     * @param action\n     * @param argList\n     * @private\n     */\n    private saveActionToDebugHistoryList(action: string, ...argList: any[]): void {\n        if (!this.debugBuild.status) {\n            return;\n        }\n\n        const historyBundle: {\n            date: any;\n            action: any;\n            pipeline: any;\n            value?: any;\n        } = { date: this.getCurrentDate(), action: `${this.pipelineName} => ${action}`, pipeline: this.stageList };\n        if (argList && argList.length) {\n            historyBundle.value = JSON.stringify(argList.length > 1? argList : argList[0]);\n        }\n\n        if (this.debugBuild && this.debugBuild.status) this.debugBuild.historyList.push(historyBundle);\n        else {\n            this.debugBuild = {\n                status: argList[0] ? argList[0].debug : false,\n                historyList: [historyBundle]\n            }\n        }\n\n        this.log('info', 'saveToDebugActionList', historyBundle);\n    }\n\n    /**\n     * Get the list of all actions stored in the debug history list\n     */\n    public readonly getDebugActionList = () => {\n        this.log('info', 'getDebugActionList', this.debugBuild.historyList);\n        return this.debugBuild.historyList;\n    }\n\n    /**\n     * getName\n     */\n    public readonly getName = () => {\n        this.saveActionToDebugHistoryList('getName');\n        return this.pipelineName;\n    }\n    /**\n     * enableDebug\n     */\n    public readonly enableDebug = () => {\n        this.debugBuild.status = true;\n        this.saveActionToDebugHistoryList('enableDebug', { debugBuildStatus: this.debugBuild.status });\n        return this.debugBuild.status;\n    }\n    /**\n     * disableDebug\n     */\n    public readonly disableDebug = () => {\n        this.debugBuild.status = false;\n        this.saveActionToDebugHistoryList('disableDebug', { debugBuildStatus: this.debugBuild.status });\n        return this.debugBuild.status;\n    }\n    /**\n     * reset\n     */\n    public readonly resetPipeline = () => {\n        this.stageList = [];\n        this.saveActionToDebugHistoryList('resetPipeline');\n        return this.stageList;\n    }\n\n    /**\n     * addStage\n     * @param stageTypeLabel\n     * @param stageValue\n     */\n    public readonly addStage = (\n        stageTypeLabel: 'addFields' | 'bucket' | 'bucketAuto' | 'collStats' | 'count' | 'facet' | 'geoNear' |\n            'graphLookup' | 'group' | 'indexStats' | 'limit' | 'listSessions' | 'lookup' | 'match' | 'merge' | 'out' |\n            'planCacheStats' | 'project' | 'redact' | 'replaceRoot' | 'replaceWith' | 'sample' | 'search' | 'set' |\n            'skip' | 'sort' | 'sortByCount' | 'unionWith' | 'unset' | 'unwind',\n        stageValue: any\n    ) => {\n        const stageTypeValue = getStageTypeValueFor(stageTypeLabel);\n        if (!stageTypeValue && this.debugBuild.status) {\n            this.saveActionToDebugHistoryList('getStageTypeValueFor', { stageTypeLabel, stageValue: JSON.stringify(stageValue) });\n            throw new PipelineError('Impossible to add the stage, the stage name is not valid!');\n        }\n\n        const newStageToAdd = this.createObject(stageTypeValue ? stageTypeValue : '$' + stageTypeLabel, stageValue) as StageInterface;\n        this.stageList.push(newStageToAdd);\n\n        this.saveActionToDebugHistoryList('addStage', { stageTypeLabel, stageValue: JSON.stringify(stageValue) });\n        return this;\n    }\n\n    /**\n     * getPipeline\n     */\n    public readonly getPipeline = () => {\n        this.saveActionToDebugHistoryList('getPipeline');\n        return this.verifyPipelineValidity([...this.stageList]);\n    }\n\n    /**\n     * verifyPipelineValidity\n     * @param pipelineBuilt\n     */\n    private readonly verifyPipelineValidity = (pipelineBuilt: StageInterface[]) => {\n        this.log('info', 'verifyPipelineValidity of ' + this.pipelineName + ' pipeline:\\n', JSON.stringify(this.stageList));\n        if (!pipelineBuilt.length) throw new PipelineError('Error, ' + this.pipelineName + ' pipeline is empty!');\n\n        this.stageErrorList = pipelineBuilt.map(\n            s => this.isValidStage(s)\n        ).filter(error => error) as StageErrorInterface[];\n\n        if (this.stageErrorList.length) {\n            const errorMessage = this.stageErrorList.map(\n                (e, i) => (i + 1) + ') ' + e.message\n            ).join('\\n');\n            this.log('error', errorMessage, 'stageErrorList', this.stageErrorList);\n\n            this.saveActionToDebugHistoryList('stageErrorList', { errorMessage });\n            throw new PipelineError(errorMessage);\n        }\n        return pipelineBuilt;\n    }\n\n    /**\n     * isValidStage\n     * @param stageToValidate\n     * @private\n     */\n    private isValidStage(stageToValidate: StageInterface): null | StageErrorInterface {\n        const stageType = Object.keys(stageToValidate)[0].replace('$', '');\n\n        const treatedStageList = [\n            'addFields', 'bucket', 'bucketAuto', 'collStats', 'count', 'facet', 'geoNear', 'graphLookup', 'group',\n            'indexStats', 'limit', 'listSessions', 'lookup', 'match', 'merge', 'out', 'planCacheStats', 'project',\n            'redact', 'replaceRoot', 'replaceWith', 'sample', 'search', 'set', 'skip', 'sort', 'sortByCount',\n            'unionWith', 'unset', 'unwind'\n        ];\n        if (treatedStageList.includes(stageType)) {\n            return null;\n        }\n\n        this.saveActionToDebugHistoryList(\n            'Stage Error',\n            { stageType, message: 'this pipeline stage type is invalid or not yet treated.' },\n            { invalidStage: JSON.stringify(stageToValidate) }\n        );\n        return { stageType, message: 'the ' + stageType + ' stage type is invalid or not yet treated.' };\n    }\n\n    // Utils\n    /**\n     * newObject\n     * @param key\n     * @param value\n     */\n    private readonly createObject = (key: string, value: any) => {\n        const object: {[index: string]: any} = {};\n        object[key] = value;\n        return object;\n    }\n\n    /**\n     * getCurrentDate\n     */\n    private getCurrentDate = () => moment().tz('Europe/Paris').format();\n\n    /**\n     * log\n     * @param type\n     * @param messageList\n     * @private\n     */\n    private log(\n        type: 'info' | 'warn' | 'error',\n        ...messageList: any[]\n    ) {\n        if (this.logsEnabled) {\n            console[type](\n                this.getCurrentDate() + ':\\n',\n                ...messageList\n            );\n        }\n    }\n}\n\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PipelineError.html":{"url":"classes/PipelineError.html","title":"class - PipelineError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PipelineError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/errors/pipeline.error.ts\n        \n\n            \n                Description\n            \n            \n                PipelineError\n\n            \n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message?: string)\n                    \n                \n                        \n                            \n                                Defined in lib/errors/pipeline.error.ts:8\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'PipelineError'\n                        \n                    \n                        \n                            \n                                    Defined in lib/errors/pipeline.error.ts:8\n                            \n                        \n\n                \n                    \n                        name\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PipelineError extends Error {\n    /**\n     * name\n     */\n    name = 'PipelineError';\n\n    /**\n     * constructor\n     * @param message\n     */\n    constructor(message?: string) {\n        super(message ? message : 'An error occurred while building the pipeline.');\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ProjectStageInterface.html":{"url":"interfaces/ProjectStageInterface.html","title":"interface - ProjectStageInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ProjectStageInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/interfaces/project-stage.interface.ts\n        \n\n            \n                Description\n            \n            \n                interface ProjectStageInterface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        list\n                                \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        list\n                                    \n                                \n                                \n                                    \n                                        list:     any[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    list\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:     \"only\" | \"ignore\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"only\" | \"ignore\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    type\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface ProjectStageInterface {\n    /**\n     * type\n     */\n    type: 'only' | 'ignore';\n    /**\n     * list\n     */\n    list: any[];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StageErrorInterface.html":{"url":"interfaces/StageErrorInterface.html","title":"interface - StageErrorInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  StageErrorInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/interfaces/stage-error.interface.ts\n        \n\n            \n                Description\n            \n            \n                interface StageErrorInterface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        message\n                                \n                                \n                                        stageType\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    message\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stageType\n                                    \n                                \n                                \n                                    \n                                        stageType:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    stageType\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface StageErrorInterface {\n    /**\n     * stageType\n     */\n    stageType: string;\n    /**\n     * message\n     */\n    message: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StageInterface.html":{"url":"interfaces/StageInterface.html","title":"interface - StageInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  StageInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/interfaces/stage.interface.ts\n        \n\n            \n                Description\n            \n            \n                interface StageInterface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        $addFields\n                                \n                                \n                                            Optional\n                                        $count\n                                \n                                \n                                            Optional\n                                        $limit\n                                \n                                \n                                            Optional\n                                        $lookup\n                                \n                                \n                                            Optional\n                                        $match\n                                \n                                \n                                            Optional\n                                        $project\n                                \n                                \n                                            Optional\n                                        $skip\n                                \n                                \n                                            Optional\n                                        $sort\n                                \n                                \n                                            Optional\n                                        $unset\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        $addFields\n                                    \n                                \n                                \n                                    \n                                        $addFields:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    $addFields\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        $count\n                                    \n                                \n                                \n                                    \n                                        $count:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    $count\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        $limit\n                                    \n                                \n                                \n                                    \n                                        $limit:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    $limit\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        $lookup\n                                    \n                                \n                                \n                                    \n                                        $lookup:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    $lookup\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        $match\n                                    \n                                \n                                \n                                    \n                                        $match:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    $match\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        $project\n                                    \n                                \n                                \n                                    \n                                        $project:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    $project\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        $skip\n                                    \n                                \n                                \n                                    \n                                        $skip:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    $skip\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        $sort\n                                    \n                                \n                                \n                                    \n                                        $sort:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    $sort\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        $unset\n                                    \n                                \n                                \n                                    \n                                        $unset:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    $unset\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface StageInterface {\n    /**\n     * $addFields\n     */\n    $addFields?: any;\n    /**\n     * $count\n     */\n    $count?: any;\n    /**\n     * $limit\n     */\n    $limit?: any;\n    /**\n     * $lookup\n     */\n    $lookup?: any;\n    /**\n     * $match\n     */\n    $match?: any;\n    /**\n     * $project\n     */\n    $project?: any;\n    /**\n     * $skip\n     */\n    $skip?: any;\n    /**\n     *$sort\n     */\n    $sort?: any;\n    /**\n     *$unset\n     */\n    $unset?: any;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChangelog\nAll notable changes to this project will be documented in this file. See standard-version for commit guidelines.\n0.0.2-35 (2021-03-17)\n0.0.2-34 (2021-03-17)\n0.0.2-33 (2021-03-17)\n0.0.2-32 (2021-03-17)\n0.0.2-31 (2021-03-17)\n0.0.2-30 (2021-03-17)\n0.0.2-29 (2021-03-17)\n0.0.2-28 (2021-03-17)\n0.0.2-27 (2021-03-17)\n0.0.2-26 (2021-03-17)\n0.0.2-25 (2021-03-17)\n0.0.2-24 (2021-03-17)\n0.0.2-23 (2021-03-17)\n0.0.2-22 (2021-03-17)\n0.0.2-21 (2021-03-17)\n0.0.2-20 (2021-03-17)\n0.0.2-19 (2021-03-17)\n0.0.2-18 (2021-03-17)\n0.0.2-17 (2021-03-17)\n0.0.2-16 (2021-03-17)\n0.0.2-15 (2021-03-17)\n0.0.2-14 (2021-03-17)\n0.0.2-13 (2021-03-17)\n0.0.2-12 (2021-03-17)\n0.0.2-11 (2021-03-17)\n0.0.2-10 (2021-03-17)\nBug Fixes\n\nchange import moment to require moment (826ac37)\n\n0.0.2-alpha.7 (2021-03-16)\n0.0.2-alpha.5 (2021-03-16)\n0.0.2-alpha.4 (2021-03-16)\n0.0.2-alpha.3 (2021-03-16)\nBug Fixes\n\nbuild script (281fb81)\n\n0.0.2-alpha.2 (2021-03-16)\n0.0.2-alpha.1 (2021-03-16)\n0.0.2-alpha.0 (2021-03-15)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                lib/environments/index.ts\n            \n            variable\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/errors/pipeline.error.ts\n            \n            class\n            PipelineError\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/helpers/index.ts\n            \n            variable\n            Lookup\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/helpers/index.ts\n            \n            variable\n            lookupConditionStage\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/helpers/index.ts\n            \n            variable\n            lookupEqualityStage\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/interfaces/debug-build.interface.ts\n            \n            interface\n            DebugBuildInterface\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/interfaces/lookup-condition-payload.interface.ts\n            \n            interface\n            LookupConditionPayloadInterface\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                lib/interfaces/lookup-equality-payload.interface.ts\n            \n            interface\n            LookupEqualityPayloadInterface\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                lib/interfaces/project-stage.interface.ts\n            \n            interface\n            ProjectStageInterface\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/interfaces/stage-error.interface.ts\n            \n            interface\n            StageErrorInterface\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/interfaces/stage-type.interface.ts\n            \n            variable\n            getStageTypeValueFor\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/interfaces/stage.interface.ts\n            \n            interface\n            StageInterface\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                lib/main.ts\n            \n            class\n            PipelineBuilder\n            \n                100 %\n                (20/20)\n            \n        \n        \n            \n                \n                lib/main.ts\n            \n            variable\n            moment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/accumulator/index.ts\n            \n            variable\n            AddToSet\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/accumulator/index.ts\n            \n            variable\n            Avg\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/accumulator/index.ts\n            \n            variable\n            Max\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/accumulator/index.ts\n            \n            variable\n            Min\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/accumulator/index.ts\n            \n            variable\n            Push\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/accumulator/index.ts\n            \n            variable\n            StdDevPop\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/accumulator/index.ts\n            \n            variable\n            StdDevSamp\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/accumulator/index.ts\n            \n            variable\n            Sum\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/arithmetic/index.ts\n            \n            variable\n            Absolute\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/arithmetic/index.ts\n            \n            variable\n            Add\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/arithmetic/index.ts\n            \n            variable\n            Ceil\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/arithmetic/index.ts\n            \n            variable\n            Divide\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/arithmetic/index.ts\n            \n            variable\n            Exponent\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/arithmetic/index.ts\n            \n            variable\n            Floor\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/arithmetic/index.ts\n            \n            variable\n            Log\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/arithmetic/index.ts\n            \n            variable\n            Log10\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/arithmetic/index.ts\n            \n            variable\n            Mod\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/arithmetic/index.ts\n            \n            variable\n            Multiply\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/arithmetic/index.ts\n            \n            variable\n            NaturalLog\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/arithmetic/index.ts\n            \n            variable\n            Pow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/arithmetic/index.ts\n            \n            variable\n            Round\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/arithmetic/index.ts\n            \n            variable\n            Sqrt\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/arithmetic/index.ts\n            \n            variable\n            Subtract\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/arithmetic/index.ts\n            \n            variable\n            Trunc\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/array/index.ts\n            \n            variable\n            ArrayElemAt\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/array/index.ts\n            \n            variable\n            ArrayToObject\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/array/index.ts\n            \n            variable\n            ConcatArrays\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/array/index.ts\n            \n            variable\n            Filter\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/array/index.ts\n            \n            variable\n            First\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/array/index.ts\n            \n            variable\n            In\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/array/index.ts\n            \n            variable\n            IndexOfArray\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/array/index.ts\n            \n            variable\n            IsArray\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/array/index.ts\n            \n            variable\n            Last\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/array/index.ts\n            \n            variable\n            MapOperator\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/array/index.ts\n            \n            variable\n            ObjectToArray\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/array/index.ts\n            \n            variable\n            Range\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/array/index.ts\n            \n            variable\n            Reduce\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/array/index.ts\n            \n            variable\n            ReverseArray\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/array/index.ts\n            \n            variable\n            Size\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/array/index.ts\n            \n            variable\n            Slice\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/array/index.ts\n            \n            variable\n            Zip\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/boolean/index.ts\n            \n            variable\n            And\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/boolean/index.ts\n            \n            variable\n            Not\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/boolean/index.ts\n            \n            variable\n            Or\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/comparison/index.ts\n            \n            variable\n            Compare\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/comparison/index.ts\n            \n            variable\n            Equal\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/comparison/index.ts\n            \n            variable\n            GreaterThan\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/comparison/index.ts\n            \n            variable\n            GreaterThanEqual\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/comparison/index.ts\n            \n            variable\n            LessThan\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/comparison/index.ts\n            \n            variable\n            LessThanEqual\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/comparison/index.ts\n            \n            variable\n            NotEqual\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/conditional/index.ts\n            \n            variable\n            Cond\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/conditional/index.ts\n            \n            variable\n            IfNull\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/conditional/index.ts\n            \n            variable\n            Switch\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/custom-aggregation/index.ts\n            \n            variable\n            Accumulator\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/custom-aggregation/index.ts\n            \n            variable\n            FunctionOperator\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/data-size/index.ts\n            \n            variable\n            BinarySize\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/data-size/index.ts\n            \n            variable\n            BsonSize\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            DateFromParts\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            DateFromString\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            DateToParts\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            DateToString\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            DayOfMonth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            DayOfWeek\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            DayOfYear\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            Hour\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            IsoDayOfWeek\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            IsoWeek\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            IsoWeekYear\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            Millisecond\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            Minute\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            Month\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            Second\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            ToDate\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            Week\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            Year\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/misc/index.ts\n            \n            variable\n            Expression\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/misc/index.ts\n            \n            variable\n            Field\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/misc/index.ts\n            \n            variable\n            Let\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/misc/index.ts\n            \n            variable\n            Literal\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/misc/index.ts\n            \n            variable\n            MergeObjects\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/misc/index.ts\n            \n            variable\n            Meta\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/misc/index.ts\n            \n            variable\n            Rand\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/misc/index.ts\n            \n            variable\n            SampleRate\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/set/index.ts\n            \n            variable\n            AllElementsTrue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/set/index.ts\n            \n            variable\n            AnyElementTrue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/set/index.ts\n            \n            variable\n            SetDifference\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/set/index.ts\n            \n            variable\n            SetEquals\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/set/index.ts\n            \n            variable\n            SetIntersection\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/set/index.ts\n            \n            variable\n            SetIsSubset\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/set/index.ts\n            \n            variable\n            SetUnion\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            Concat\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            IndexOfBytes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            IndexOfCP\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            Ltrim\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            RegexFind\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            RegexFindAll\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            RegexMatch\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            ReplaceAll\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            ReplaceOne\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            Rtrim\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            Split\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            StrCaseCmp\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            StrLenBytes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            StrLenCP\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            Substr\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            SubstrBytes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            SubstrCP\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            ToLower\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            ToString\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            ToUpper\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            Trim\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/trigonometry/index.ts\n            \n            variable\n            Acos\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/trigonometry/index.ts\n            \n            variable\n            Acosh\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/trigonometry/index.ts\n            \n            variable\n            Asin\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/trigonometry/index.ts\n            \n            variable\n            Asinh\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/trigonometry/index.ts\n            \n            variable\n            Atan\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/trigonometry/index.ts\n            \n            variable\n            Atan2\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/trigonometry/index.ts\n            \n            variable\n            Atanh\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/trigonometry/index.ts\n            \n            variable\n            Cos\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/trigonometry/index.ts\n            \n            variable\n            Cosh\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/trigonometry/index.ts\n            \n            variable\n            DegreesToRadians\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/trigonometry/index.ts\n            \n            variable\n            RadiansToDegrees\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/trigonometry/index.ts\n            \n            variable\n            Sin\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/trigonometry/index.ts\n            \n            variable\n            Sinh\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/trigonometry/index.ts\n            \n            variable\n            Tan\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/trigonometry/index.ts\n            \n            variable\n            Tanh\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/type/index.ts\n            \n            variable\n            Convert\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/type/index.ts\n            \n            variable\n            IsNumber\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/type/index.ts\n            \n            variable\n            ToBool\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/type/index.ts\n            \n            variable\n            ToDecimal\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/type/index.ts\n            \n            variable\n            ToDouble\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/type/index.ts\n            \n            variable\n            ToInt\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/type/index.ts\n            \n            variable\n            ToLong\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/type/index.ts\n            \n            variable\n            ToObjectId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/type/index.ts\n            \n            variable\n            Type\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            custom-env : ^2.0.1\n        \n            moment-timezone : ^0.5.33\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            StageTypeEnum   (lib/.../stage-type.interface.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/interfaces/stage-type.interface.ts\n    \n        \n            \n                \n                    \n                        \n                        StageTypeEnum\n                    \n                \n                    \n                        \n                            Aggregation Pipeline Stages.*\nIn the db.collection.aggregate method and db.aggregate method, pipeline stages appear in an array. Documents pass\nthrough the stages in sequence.\n\n                        \n                    \n                        \n                            \n                                 addFields\n                            \n                        \n                        \n                            \n                                Value : $addFields\n                            \n                        \n                        \n                            \n                                 bucket\n                            \n                        \n                        \n                            \n                                Value : $bucket\n                            \n                        \n                        \n                            \n                                 bucketAuto\n                            \n                        \n                        \n                            \n                                Value : $bucketAuto\n                            \n                        \n                        \n                            \n                                 collStats\n                            \n                        \n                        \n                            \n                                Value : $collStats\n                            \n                        \n                        \n                            \n                                 count\n                            \n                        \n                        \n                            \n                                Value : $count\n                            \n                        \n                        \n                            \n                                 facet\n                            \n                        \n                        \n                            \n                                Value : $facet\n                            \n                        \n                        \n                            \n                                 geoNear\n                            \n                        \n                        \n                            \n                                Value : $geoNear\n                            \n                        \n                        \n                            \n                                 graphLookup\n                            \n                        \n                        \n                            \n                                Value : $graphLookup\n                            \n                        \n                        \n                            \n                                 group\n                            \n                        \n                        \n                            \n                                Value : $group\n                            \n                        \n                        \n                            \n                                 indexStats\n                            \n                        \n                        \n                            \n                                Value : $indexStats\n                            \n                        \n                        \n                            \n                                 limit\n                            \n                        \n                        \n                            \n                                Value : $limit\n                            \n                        \n                        \n                            \n                                 listSessions\n                            \n                        \n                        \n                            \n                                Value : $listSessions\n                            \n                        \n                        \n                            \n                                 lookup\n                            \n                        \n                        \n                            \n                                Value : $lookup\n                            \n                        \n                        \n                            \n                                 match\n                            \n                        \n                        \n                            \n                                Value : $match\n                            \n                        \n                        \n                            \n                                 merge\n                            \n                        \n                        \n                            \n                                Value : $merge\n                            \n                        \n                        \n                            \n                                 out\n                            \n                        \n                        \n                            \n                                Value : $out\n                            \n                        \n                        \n                            \n                                 planCacheStats\n                            \n                        \n                        \n                            \n                                Value : $planCacheStats\n                            \n                        \n                        \n                            \n                                 project\n                            \n                        \n                        \n                            \n                                Value : $project\n                            \n                        \n                        \n                            \n                                 redact\n                            \n                        \n                        \n                            \n                                Value : $redact\n                            \n                        \n                        \n                            \n                                 replaceRoot\n                            \n                        \n                        \n                            \n                                Value : $replaceRoot\n                            \n                        \n                        \n                            \n                                 replaceWith\n                            \n                        \n                        \n                            \n                                Value : $replaceWith\n                            \n                        \n                        \n                            \n                                 sample\n                            \n                        \n                        \n                            \n                                Value : $sample\n                            \n                        \n                        \n                            \n                                 search\n                            \n                        \n                        \n                            \n                                Value : $search\n                            \n                        \n                        \n                            \n                                 set\n                            \n                        \n                        \n                            \n                                Value : $set\n                            \n                        \n                        \n                            \n                                 skip\n                            \n                        \n                        \n                            \n                                Value : $skip\n                            \n                        \n                        \n                            \n                                 sort\n                            \n                        \n                        \n                            \n                                Value : $sort\n                            \n                        \n                        \n                            \n                                 sortByCount\n                            \n                        \n                        \n                            \n                                Value : $sortByCount\n                            \n                        \n                        \n                            \n                                 unionWith\n                            \n                        \n                        \n                            \n                                Value : $unionWith\n                            \n                        \n                        \n                            \n                                 unset\n                            \n                        \n                        \n                            \n                                Value : $unset\n                            \n                        \n                        \n                            \n                                 unwind\n                            \n                        \n                        \n                            \n                                Value : $unwind\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmongodb-pipeline-builder\n\n\n\nis a pipeline builder for the aggregate method of a mongoDB collection. It will simplify pipelines by making them more\nreadable and much easier to edit. It also allows you to test your pipelines on a dataset in order to verify them.\n\n\nnpm package \nnpm i mongodb-pipeline-builder\nUsage\n\nimport { PipelineBuilder } from 'mongodb-pipeline-builder/dist';\nimport { Expression } from 'mongodb-pipeline-builder/dist/operators/misc';\nimport { Equal } from 'mongodb-pipeline-builder/dist/operators/comparison';\n\n\n\nconst myNewPipeline = new PipelineBuilder('name-of-my-new-pipeline')\n    .addStage('match', Expression(Equal('$id', 'userId')))\n    .addStage('project', { _id: 0, firstname: 1, lastname: 1 })\n    .getPipeline();\n\n\nSoon more complex examples will be available\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2021 Mike Dev\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    6 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
